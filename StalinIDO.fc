
#include "imports/stdlib.fc";
#include "imports/jettonlib.fc";
const a = "aboba"u;
const op::set_jetton_wallet = "op::set_jetton_wallet"c;
const op::set_price = "op::set_price"c;
const op::withdraw_jettons = "op::withdraw_jettons"c;
const op::withdraw = "op::withdraw"c;

global slice admin_wallet;
global slice wallet_for_ton;
global slice jetton_wallet;
global int jetton_balance;
global int price;
global int sold_jetton_amount;

() save_data() impure {
    set_data(
        begin_cell()
            .store_slice(admin_wallet)
            .store_slice(wallet_for_ton)
            .store_slice(jetton_wallet)
            .store_coins(jetton_balance)
            .store_coins(price)
            .store_coins(sold_jetton_amount)
        .end_cell()
    );
}

() load_data() impure {
    var ds = get_data().begin_parse();

    admin_wallet = ds~load_msg_addr();
    wallet_for_ton = ds~load_msg_addr();
    jetton_wallet = ds~load_msg_addr();
    jetton_balance = ds~load_coins();
    price = ds~load_coins();
    sold_jetton_amount = ds~load_coins();

    ds.end_parse();
}

;; pow function
(int) binpow (int n, int e) {
    if (e == 0) {
        return 1;
    }
    if (e == 1) {
        return n;
    }
    int p = binpow(n, e / 2);
    p *= p;
    if ((e % 2) == 1) {
        p *= n;
    }
    return p;
}

() exchange(int msg_value, slice sender_address, int minus_value) impure inline {
    if(msg_value >= 10 * 90000000) {
        int jetton_amount = (msg_value - minus_value) * (price / 1000000000);


        if (jetton_amount <= jetton_balance) {

            jetton::send(9 * binpow(10, 7), jetton_wallet, 0, jetton_amount, sender_address, sender_address, 1, 0);

            jetton_balance = jetton_balance - jetton_amount;
            sold_jetton_amount = sold_jetton_amount + jetton_amount;
            
            messages::send(0, wallet_for_ton, 128);

            save_data();
            return ();
        }
    }

    messages::send(0, sender_address, 64);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    (int sender_wc, int sender_hashpart) = parse_std_addr(sender_address);
    throw_unless(333, sender_wc == 0); ;; not базаchain

    if (flags & 1) { 
        return ();
    }

    load_data();

    if (in_msg_body.slice_empty?()) {
        if (jetton_wallet.slice_empty?()) {
            return ();
        }
        exchange(msg_value, sender_address, 0);    
        return ();  
    }

    int op = in_msg_body~load_uint(32);

    if ((op == 0xdec25470) | (op == 0)) {
        exchange(msg_value, sender_address, 100000000);
        return ();
    }

    if (op == op::set_jetton_wallet) {
        if equal_slices(sender_address, admin_wallet) {
            jetton_wallet = in_msg_body~load_msg_addr();
            jetton_balance = 0;
            save_data();

            return ();
        }
    }

    if (op == op::set_price) {
        if equal_slices(sender_address, admin_wallet) {
            price = in_msg_body~load_coins();
            save_data();

            return ();
        }
    }

    if (op == op::withdraw_jettons) {
        if equal_slices(sender_address, admin_wallet) {
            int withdraw_amount = in_msg_body~load_coins();

            jetton::send(0, jetton_wallet, 0, withdraw_amount, admin_wallet, admin_wallet, 1, 64);

            if (jetton_balance <= withdraw_amount) {
                jetton_balance = 0;
            } else {
                jetton_balance = jetton_balance - withdraw_amount;
            }
            save_data();

            return ();
        }
    }

    if (op == op::withdraw) {
        if equal_slices(sender_address, admin_wallet) {
            int withdraw_amount = in_msg_body~load_coins();

            if (withdraw_amount == 0) {
                messages::send(0, admin_wallet, 128);
            } else {
                messages::send(withdraw_amount, admin_wallet, 0);
            }

            return ();
        }
    }

    if (op == op::transfer_notification) {
        in_msg_body~load_uint(64);

        int amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();

        if equal_slices(sender_address, jetton_wallet) {
            jetton_balance = jetton_balance + amount;
            save_data();

            return ();
        }
        return ();
    }

    throw(0xffff);
}


(int) get_jetton_balance() method_id {
    load_data();
    return jetton_balance;
}

(int) get_price() method_id {
    load_data();
    return price;
}

(int) get_sold_jetton_amount() method_id {
    load_data();
    return sold_jetton_amount;
}

(slice) get_jetton_wallet() method_id {
    load_data();
    return jetton_wallet;
}

(slice) get_admin_wallet() method_id {
    load_data();
    return admin_wallet;
}

(slice) get_wallet_for_ton() method_id {
    load_data();
    return wallet_for_ton;
}

(int, int, int, slice, slice, slice) get_all_data() method_id {
    load_data();
    return (jetton_balance, price, sold_jetton_amount, jetton_wallet, admin_wallet, wallet_for_ton);
}